/****** MAPSCREN.H ************* Belenkov O.V.   ****** 25/02/03 ***
*                                                                  *
*              Copyright (c) PANORAMA Group 1991-2003              *
*                      All Rights Reserved                         *
*                                                                  *
********************************************************************
*                                                                  *
*       ОПИСАНИЕ ФУНКЦИЙ УПРАВЛЕНИЯ ОТОБРАЖЕНИЕМ ПОДВИЖНЫХ         *
*        ОБ'ЕКТОВ ЧЕРЕЗ ПРОМЕЖУТОЧНЫЙ БУФЕР ЭКРАНА ДЛЯ             *
*          МИНИМИЗАЦИИ МЕРЦАНИЯ И ПЕРЕРИСОВКИ КАРТЫ
*                                                                  *
********************************************************************
*                                                                  *
*     Импортирование функций В Windows :                           *
*                                                                  *
*    // Загрузка библиотеки                                        *
*    HINSTANCE hInstance = ::LoadLibrary("gisscreen.dll");         *
*                                                                  *
*    // Вызов функции                                              *
*    HSCREEN (WINAPI * OpenScreen)(HMAP, long int, long int);      *
*    (FARPROC)OpenScreen =                                         *
*                    ::GetProcAddress(libInst, "scrOpenScreen");   *
*    HSCREEN hScreen    = OpenScreen(hMap, width, height);         *
*    ...                                                           *
*                                                                  *
*    // Выгрузка библиотеки                                        *
*    ::FreeLibrary(hInstance);                                     *
*                                                                  *
*******************************************************************/

#ifndef MAPSCREN_H
#define MAPSCREN_H

#ifndef MAPTYPE_H
 #include "maptype.h"
#endif 

#ifndef MAPGDI_H
 #include "mapgdi.h"
#endif

// Вариант последовательности вызова функций:
// ------------------------------------------
//
// HSCREEN hScreen = scrOpenScreen(...);
//
// scrDrawMap(hScreen, ...);
//
// scrDrawMapObject(hScreen, ...);
// scrDrawUserObject(hScreen, ...);
// ...
//
// scrScrollScreen(hScreen, ...);
// scrDrawMap(hScreen, ...);
//
// scrDrawMapObject(hScreen, ...);
// scrDrawUserObject(hScreen, ...);
// ...
//
// scrCloseScreen(hScreen);


typedef long int  HSCREEN;   // ИДЕНТИФИКАТОР ОБРАЗА ЭКРАНА В ПАМЯТИ
#define SCREENLIMIT  32      // ПРЕДЕЛЬНОЕ ЧИСЛО СОЗДАВАЕМЫХ ОБРАЗОВ ЭКРАНА

#ifdef __cplusplus
extern "C"
{
#endif

 // Создать образ экран карты в памяти для исключения мигания
 // перемещаемых по карте объектов
 // hMap   - идентификатор открытых картографических данных (фон),
 // width  - ширина клиентской части окна карты в точках (max - 4096),
 // height - высота клиентской части окна карты в точках (max - 4096).
 // При успешном выполнении выделяется две области памяти
 // размером (width * height * 4) каждая.
 // При успешном выполнении возвращает идентификатор образа экрана
 // При ошибке возвращает ноль

 HSCREEN _export WINAPI scrOpenScreen(HMAP hMap,
                                      long int width, long int height);


 // Удалить из памяти образ экрана, освободить все ресурсы
 // hScreen - идентификатор образа экрана.

 void _export WINAPI scrCloseScreen(HSCREEN hScreen);

 // Изменить размер образа экрана в соответсвии с реальным размером
 // клиентской части окна карты
 // hScreen - идентификатор образа экрана,
 // erase  - признак стирания изображения при смене размера
 //          (если карта все равно будет перерисовываться, то быстрее
 //           выполниться вызов со стиранием),
 // width  - ширина клиентской части окна карты в точках,
 // height - высота клиентской части окна карты в точках.
 // После изменения размера возможно необходимо перерисовать
 // карту и объекты (если размер окна увеличился или параметр erase
 // не равен нулю)

 void _export WINAPI scrChangeSize(HSCREEN hScreen, long int erase,
                                   long int width, long int height);

 // Переместить изображение карты в памяти в соответствии со скроллингом
 // клиентской области окна карты
 // Без выполнения скроллинга в памяти необходимо каждый раз обновлять
 // все фоновое изображение, что требует больше времени.
 // Скроллинг клиентской области является избыточным, но его лучше
 // выполнять для улучшения восприятия изображения оператором.
 // dx - величина смещения изображения по оси Х (горизонталь вправо),
 // dy - величина смещения изображения по оси Y (вертикаль вниз).

 void _export WINAPI scrScrollScreen(HSCREEN hScreen,
                                     long int dx, long dy);

 // Обновить изображение заданного фрагмента карты в образе экрана
 // После обновления карты изображение перемещаемых объектов стирается
 // в пределах заданного фрагмента (но для стирания объектов текущим
 // видом карты достаточно вызвать scrClearObjects).
 // hScreen  - идентификатор образа экрана,
 // rect     - обновляемый фрагмент карты, задается в пикселах в
 //            системе координат полного изображения карты (PICTURE) !!!
 // position - положение верхнего левого угла фрагмента в клиентской
 //            области окна карты (и образа экрана)

 void _export WINAPI scrDrawMap(HSCREEN hScreen, RECT * rect,
                                POINT * position);

 // Отобразить объект поверх карты местности в образе экрана
 // hScreen  - идентификатор образа экрана,
 // image    - описание внешнего вида объекта (если равно нулю,
 //            объект рисуется своим условным знаком из классификатора)
 // object   - описание объекта (может размещаться в памяти без сохранения
 //            на карте, один HOBJ может последовательно использоваться
 //            для вывода разных объектов с заменой координат).

 void _export WINAPI scrDrawMapObject(HSCREEN hScreen,
                                      PAINTPARM * image, HOBJ object);

 // Отобразить объект поверх карты местности в образе экрана c учетом
 // заданного сдвига метрики
 // hScreen  - идентификатор образа экрана,
 // offset   - сдвиг координат в соответствии с параметром place
 //            (для точечного объекта можно обнулить координаты
 //            в HOBJ и задавать координаты в смещении),
 // image    - описание внешнего вида объекта (если равно нулю,
 //            объект рисуется своим условным знаком из классификатора)
 // object   - описание объекта (может размещаться в памяти без сохранения
 //            на карте, один HOBJ может последовательно использоваться
 //            для вывода разных объектов с заменой координат).

 void _export WINAPI scrDrawOffsetMapObject(HSCREEN hScreen,
                                            DOUBLEPOINT * offset,
                                            PAINTPARM * image, HOBJ object);


 // Отобразить объект поверх карты местности в образе экрана
 // hScreen  - идентификатор образа экрана,
 // image    - описание внешнего вида объекта (см. mapgdi.h),
 // place    - система координат объекта (PP_PLANE - метры,
 //            PP_GEO - радианы, PP_PICTURE - пикселы).

 void _export WINAPI scrDrawUserObject(HSCREEN hScreen,
                                       PAINTPARM * image,
                                       PLACEDATA * data,
                                       long int place);

 // Отобразить объект поверх карты местности в образе экрана c учетом
 // заданного сдвига метрики
 // hScreen  - идентификатор образа экрана,
 // offset   - сдвиг координат в соответствии с параметром place
 //            (для точечного объекта можно обнулить координаты
 //            в HOBJ и задавать координаты в смещении),
 // image    - описание внешнего вида объекта (см. mapgdi.h),
 // data     - координаты объекта,
 // place    - система координат объекта (PP_PLANE - метры,
 //            PP_GEO - радианы, PP_PICTURE - пикселы).

 void _export WINAPI scrDrawOffsetUserObject(HSCREEN hScreen,
                                             DOUBLEPOINT * offset,
                                             PAINTPARM * image,
                                             PLACEDATA * data,
                                             long int place);

 // Стереть изображение объектов на заданном фрагменте образа
 // экрана (используется копия фона карты в отдельном буфере)
 // rect - положение фрагмента в пикселах от верхнего левого
 //        угла образа экрана (клиентской части окна)
 // Если rect равно нулю - очищается весь образ экрана

 void _export WINAPI scrClearObjects(HSCREEN hScreen, RECT * rect);

 // Запросить контекст образа экрана для отображения подвижных объектов
 // стандартными средствами графической системы (Windows/ XWindow)
 // Запрошенный контекст обязательно должен освобождаться после
 // завершения отображения объектов
 // Отображение выполняется поверх карты

 HDC  _export WINAPI scrGetScreenDC(HSCREEN hScreen);

 // Освободить контекст образа экрана

 void _export WINAPI scrReleaseDC(HSCREEN hScreen);

 // Отобразить полный образ экрана в клиентскую часть окна
 // (Применяются быстрые команды типа BitBlt, XPutImage)
 // hScreen  - идентификатор образа экрана,
 // hdc      - контекст клиентской области окна (для LINUX: XCONTEXT*)
 // rect     - положение обновляемого фрагмента в пикселах от верхнего
 //            левого угла образа экрана (клиентской части окна)
 //            Если указатель равен нулю - обновляется весь экран.

 void _export WINAPI scrPaintScreen(HSCREEN hScreen, HDC  hdc, RECT * rect);

#ifdef __cplusplus
}       // extern "C"
#endif



#endif  // MAPSCREN_H

